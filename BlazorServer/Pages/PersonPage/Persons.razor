@page "/persons"
@using BlazorCrud.Services
@using BlazorServer.Data
@using BlazorServer.Models
@using Microsoft.AspNetCore.SignalR
@inject IPersonService personService
@inject IJSRuntime jsRuntime
@inject NavigationManager NavigationManager
@inject IHubContext<PersonHub> hubContext
<h3>Persons</h3>
<a href="/person/add" class="btn btn-outline-dark my-2">Add more</a>
<RadzenButton Click="@PageAddNewPerson" Icon="add_circle_outline" Text="Add new" ButtonStyle="ButtonStyle.Secondary" />

<div class="container-fluid">
    <Toasts Style="margin-top:10px" class="pt-5" Messages="messages" AutoHide="true" StackLength="3" Placement="ToastsPlacement.TopRight" ZIndex="999999999" />
    <ConfirmDialog @ref="dialog" />
    @* / thêm này mới chạy *@
    <Preload />
    <RadzenButton Text="Hi"></RadzenButton>
    <div class="row px-3">
        <div class="col-md-6 p-3">
            <RadzenDataGrid AllowColumnPicking="true" PickedColumnsChanged="@PickedColumnsChanged" AllowSorting="true" AllowPaging="true"
                            GridLines="Radzen.DataGridGridLines.Vertical" Data="@persons" TItem="Person" ColumnWidth="300px" AllowColumnResize="true"
                            ColumnResized=@OnColumnResized>

                <EmptyTemplate>
                    <p style="font-weight:900;color: #262526; font-size: 24px; text-align: center; margin: 2rem;">Đang nạp dữ liệu, đợi xíu nghen!!</p>
                </EmptyTemplate>
                <HeaderTemplate>
                    <RadzenButton Text="Hiển thị id" Click=@(() => EmployeeIDVisible = !EmployeeIDVisible) />
                </HeaderTemplate>
                <Columns>
                    <RadzenDataGridColumn Visible="@EmployeeIDVisible" TItem="Person" Title="STT" Width="80px" Frozen="true" TextAlign="TextAlign.Center" Reorderable="false" Resizable="false">
                        <Template Context="person">
                            @if (person.IsNew)
                            {
                                <span style="color: red;">New</span>
                                // nen làm chỗ date time
                            }
                            else
                            {
                                @((persons.IndexOf(person) + 1))
                            }
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Person" Property="Id" Title="ID" Width="150px" Resizable="true" />
                    <RadzenDataGridColumn TItem="Person" Property="Name" Title="Name" Width="150px" Resizable="true" />
                    <RadzenDataGridColumn TItem="Person" Property="Name" Title="Name" Width="150px" Resizable="true" />
                    <RadzenDataGridColumn TItem="Person" Property="Name" Title="Name" Width="150px" Resizable="true" />
                    <RadzenDataGridColumn TItem="Person" Property="Name" Title="Name" Width="150px" Resizable="true" />
                    <RadzenDataGridColumn TItem="Person" Property="Email" Title="Email" Width="150px" Resizable="true" />
                </Columns>
            </RadzenDataGrid>
        </div>
        <div class="col-md-6 p-3">

            <RadzenCard>
                <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Single file upload</RadzenText>
                <RadzenUpload Url="upload/single" Progress=@(args => OnProgress(args, "Single file upload")) class="w-100" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "select file" }})">
                </RadzenUpload>
            </RadzenCard>
        </div>
    </div>
</div>

@code {
    void OnProgress(UploadProgressArgs args, string name)
    {

    }
    private void PageAddNewPerson()
    {
        NavigationManager.NavigateTo("/person/add");
    }

    void PickedColumnsChanged(DataGridPickedColumnsChangedEventArgs<Person> args)
    {
    }
    bool EmployeeIDVisible = false;

    [Parameter]
    public bool WithColumnPicker { get; set; } = false;

    void OnColumnReordered(DataGridColumnReorderedEventArgs<Person> args)
    {
    }
    void OnColumnResized(DataGridColumnResizedEventArgs<Person> args)
    {
    }

    private ConfirmDialog dialog;

    private async Task ShowSaveConfirmationAsync()
    {
        var options = new ConfirmDialogOptions
            {
                YesButtonText = "OK",
                YesButtonColor = ButtonColor.Success,
                NoButtonText = "CANCEL",
                NoButtonColor = ButtonColor.Danger
            };

        var confirmation = await dialog.ShowAsync(
            title: "Simple Confirm Dialog",
            message1: "Do you want to proceed?",
            confirmDialogOptions: options);

        if (confirmation)
        {
            // do whatever
        }
        else
        {
            // do whatever
        }
    }



    List<ToastMessage> messages = new List<ToastMessage>();

    private void ShowMessage(ToastType toastType, string message) => messages.Add(CreateToastMessage(toastType, message));

    private ToastMessage CreateToastMessage(ToastType toastType, string message)
        => new ToastMessage
            {
                Type = toastType,
                Title = "Thông báo chút",
                HelpText = $"{DateTime.Now}",
                Message = $"{message}",
            };


    private List<Person> persons = new();
    private HubConnection hubConnection;
    private bool isLoadingData = true; // cho loading
    [Inject] protected PreloadService PreloadService { get; set; }
    private async Task Delete(Person person)
    {
        var options = new ConfirmDialogOptions
            {
                YesButtonText = "OK",
                YesButtonColor = ButtonColor.Success,
                NoButtonText = "CANCEL",
                NoButtonColor = ButtonColor.Danger
            };

        var confirmation = await dialog.ShowAsync(
            title: "Simple Confirm Dialog",
            message1: "Do you want to proceed?",
            confirmDialogOptions: options);

        if (confirmation)
        {
            if (personService.Delete(person.Id))
            {
                persons.Remove(person);
                await hubContext.Clients.All.SendAsync("ReceivePersons", persons);
                ShowMessage(ToastType.Info, "Xóa gòi nha");
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/personhub"))
            .Build();

        hubConnection.On<List<Person>>("ReceivePersons", receivedPersons =>
        {
            InvokeAsync(() =>
            {
                persons = receivedPersons;
                StateHasChanged();
            });
        });

        try
        {
            await hubConnection.StartAsync();
            Console.WriteLine("SignalR connection started successfully.");
            await LoadData();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error starting SignalR connection: {ex.Message}");
        }

        await base.OnInitializedAsync();
    }

    private async Task LoadData()
    {
        try
        {
            PreloadService.Show(SpinnerColor.Light, "Đợi chút xíu nghen...");
            persons = await personService.GetAllAsync();
            await hubContext.Clients.All.SendAsync("ReceivePersons", persons);
            StateHasChanged(); // Luu data da thay doi
            isLoadingData = false; // Dữ liệu đã được tải xong
            Console.WriteLine("Data loaded successfully.");
            PreloadService.Hide();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
    }
    public async ValueTask DisposeAsync()
    {
        // Ngắt kết nối SignalR khi component bị hủy
        await hubConnection.DisposeAsync();
    }

}
