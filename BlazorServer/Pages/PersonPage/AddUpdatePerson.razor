@page "/person/add"
@page "/person/edit/{userId:int}"
@using BlazorCrud.Services
@using BlazorServer.Data
@using BlazorServer.Models
@using Microsoft.AspNetCore.SignalR
@inject IPersonService personService
@inject NotificationService NotificationService
<PageTitle>@Title</PageTitle>
@inject IHubContext<PersonHub> hubContext
<h3>@Title</h3>

<a href="/persons" class="btn btn-outline-dark">Show All</a>
<div class="row">
    <div class="col-md-6">
        <Toasts Style="margin-top:10px" class="pt-2" Messages="messages" AutoHide="true" StackLength="3" Placement="ToastsPlacement.TopRight" ZIndex="999999999" />

       <EditForm Model="@person" OnValidSubmit="Save">
           <DataAnnotationsValidator/>
          
           <div class="form-group">
              <label for="Name">Name</label>
             <InputText class="form-control" @bind-Value="person.Name"/>
             <ValidationMessage For="@(()=>person.Name)"/>
           </div>

            <div class="form-group">
                <label for="Email">Email</label>
                <InputText class="form-control" @bind-Value="person.Email" @oninput="OnEmailInput" />
                <ValidationMessage For="@(()=>person.Email)" />
            </div>

            <div class="my-2">
                @message
            </div>

            <div class="my-2">
                <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Gap="3rem" Wrap="FlexWrap.Wrap" class="rz-p-12">
                    <RadzenButton style="width: 160px" Icon="save" BusyText="Saving ..." IsBusy=@busy Click=@OnBusyClick Text="Save" />
                </RadzenStack>
            </div>
       </EditForm>
    </div>
</div>

@code {
    private void OnEmailInput(ChangeEventArgs e)
    {
        string enteredEmail = e.Value?.ToString();

        if (!enteredEmail.Contains("@"))
        {
            // Nếu người dùng không nhập @, thêm tự động @gmail.com
            person.Email = $"{enteredEmail}@gmail.com";
        }
    }


    bool busy;

    private void OnClick(string text)
    {
        NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = "Button Clicked", Detail = text });
    }

    async Task OnBusyClick()
    {
        busy = true;
        await Task.Delay(1000);
        busy = false;
        await Save();
    }
    List<ToastMessage> messages = new List<ToastMessage>();

    private void ShowMessage(ToastType toastType) => messages.Add(CreateToastMessage(toastType));

    private ToastMessage CreateToastMessage(ToastType toastType)
    => new ToastMessage
        {
            Type = toastType,
            Title = "Blazor Bootstrap",
            HelpText = $"{DateTime.Now}",
            Message = $"Thêm gòi nha. Thời gian: {DateTime.Now}",
        };
    [Parameter]
    public int UserId { get; set; }
    private string message = string.Empty;
    Person person = new();
    private string Title = "Add Person";

    private async Task Save()
    {
        message = "wait...";
        if (personService.AddUpdate(person))
        {
            message = "Successfully added";
            person = new();

            // Broadcast the change to other clients
            await hubContext.Clients.All.SendAsync("ReceivePersons", await personService.GetAllAsync());
            ShowMessage(ToastType.Success);
        }
        else
        {
            message = "Could not save";
        }
    }

    protected override void OnInitialized()
    {
        if (UserId > 0)
        {
            Title = "Upage Person";
            person = personService.FindById(UserId);
        }
        base.OnInitialized();
    }
}
